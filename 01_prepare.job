#!/bin/bash

#PBS -l walltime=100:00:00
#PBS -l nodes=1:ppn=2
#PBS -l vmem=100gb
#PBS -M tyler.peirce@my.jcu.edu.au
#PBS -m abe
#PBS -N Repair
#PBS -S /bin/bash
cd $PBS_O_WORKDIR

. /export/scratch/irciniatrans/configfile.txt

echo PBS: working directory is $PBS_O_WORKDIR

module load fastx

mkdir $COUNTS
mkdir $PWD/01_results
rm $COUNTS/01_counts.trim

for SAMPLETRIM in $FASTQ/*.fastq; do
SAMPLE=$(basename $SAMPLETRIM) && echo "sample $SAMPLE"

   cat $FASTQ/$SAMPLE | fastx_clipper -a AAAAAAAAA -a TTTTTTTTT -a AGATCGGAA -l 50 -Q33 | fastq_quality_filter -Q33 -q 20 -p 80 >$PREP/$SAMPLE.trim

   LINE=$(cat $PREP/$SAMPLE.trim | grep $SEARCH | wc -l)
    echo "$SAMPLE.trim $LINE" >> $COUNTS/01_counts.trim
   
done

rm $COUNTS/01_counts.repair.dedup

#####concatinate all left, all right together

cat $PREP/*_R1_*.fastq.trim >$PREP/R1.trim.cat
cat $PREP/*_R2_*.fastq.trim >$PREP/R2.trim.cat


for SAMPLETRIM in $PREP/R1.trim.cat; do
    SAMPLE_R1=$(basename $SAMPLETRIM) && echo "Sample $SAMPLE_R1"
    SAMPLE_R2=$(echo "$SAMPLE_R1" | sed s/R1/R2/) && echo "Sample $SAMPLE_R2"

####code for checking
echo "unp_sampleR1_sampleR2 = Unp_"$SAMPLE_R1"_"$SAMPLE_R2""
echo "file path sample_R1 is $PREP/$SAMPLE_R1"
echo "file path sample_R2 is $PREP/$SAMPLE_R2"

	cp $PREP/$SAMPLE_R1 $PREP/$SAMPLE_R2 .

    	perl $SCRIPTS/rePair.pl $SAMPLE_R1 $SAMPLE_R2
    ####this perl script adds 'R1_' 'R2_' and 'Unp_' to the start of the names###

    	LINE1=$(cat R1_$SAMPLE_R1 | grep $SEARCH | wc -l)
        echo "R1_$SAMPLE_R1 $LINE1" >>$COUNTS/02_counts.repair.dedup

    	LINE2=$(cat R2_$SAMPLE_R2 | grep $SEARCH | wc -l)
        echo "R2_$SAMPLE_R2 $LINE2" >>$COUNTS/02_counts.repair.dedup

    	LINE3=$(cat Unp_"$SAMPLE_R1"_"$SAMPLE_R2" | grep $SEARCH | wc -l)
      	echo "Unp_"$SAMPLE_R1"_"$SAMPLE_R2" $LINE3" >>$COUNTS/02_counts.repair.dedup

####Deduplicating step
#Input must be fastq files, trimmed, quality-filtered and sorted into left, right and unpaired reads.
#Identifies duplicates based on identity of bases 5-30 on both left and right ends (if paired reads are supplied)or in unpaired reads.
# adds .dedup to end of file

    perl $SCRIPTS/dedupTranscriptome.pl left=R1_$SAMPLE_R1 right=R2_$SAMPLE_R2 unp=Unp_"$SAMPLE_R1"_"$SAMPLE_R2" >>$COUNTS/01_counts.repair.dedup

####Putting reads together with suffixes /1 (for left and unpaired ones) and /2 for right reads

####Adding suffix, and also concatinating the left reads and unpaired reads

    cat R1_*cat.dedup Unp_*cat.dedup | perl -pe 's/^(\@N.+)$/$1\/1/' >> R1p_suf1_R1
    cat R2_*cat.dedup | perl -pe 's/^(\@N.+)$/$1\/2/' > R2p_suf2_R2
##Need to change the @... search term to match your fastq file header
	
	mv R1_$SAMPLE_R1 R2_$SAMPLE_R2 Unp_"$SAMPLE_R1"_"$SAMPLE_R2" $PREP
	mv R1_$SAMPLE_R1.dedup R2_$SAMPLE_R2.dedup Unp_"$SAMPLE_R1"_"$SAMPLE_R2".dedup $PREP
	mv R2p_suf2_R2 R1p_suf1_R1 $PREP
	rm $SAMPLE_R1 $SAMPLE_R2 

done

